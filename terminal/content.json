{"body":"\nWhat's the simplest way to interact with a computer? No, not moving the mouse and clicking boxes on screen. You're used to it now, but the computer is doing a lot of work for this. Imagine you don't have a screen, only a printer and a keyboard. What's an even simpler way of telling the computer what you want?\n\n|> Image\n    src=images/terminal/teleprinter.jpg\n    alt=A man sitting in front of what looks like typewriter out the top of which a sheet of paper emerges. Behind him is a big cupboard-like machine.\n    width=1004\n    height=1024\n    credit=[from Flickr]{link|url=https://www.flickr.com/photos/39821974@N06/4081725004/} by [Newcastle Libraries]{link|url=https://www.flickr.com/photos/39821974@N06/} under [public domain]{link|url=https://creativecommons.org/publicdomain/mark/1.0/} \n    caption=In 1975, you could use this typewriter-like machine called a teleprinter to use a computer. There's no screen, but it can print onto the piece of paper sticking out from the top. The actual computer is visible in the background.\n\nThe simplest method is text. Write what you want.\n\nThat's exactly what the terminal does. You write what you want and the computer writes back. Even though this idea is really simple, it works so well that it is still being used today!\n\nAs a quick sidenote, terminals are sometimes also called /consoles/ or /shells/. Most of the time, people mean the same thing. `[Technically there is a difference]{link|url=https://superuser.com/a/144668}. A [shell]{link|url=https://en.wikipedia.org/wiki/Shell_(computing)} is the part that does the actual work. A [terminal]{link|url=https://en.wikipedia.org/wiki/Computer_terminal} is the setup you use to access the shell, for example a keyboard and screen or a teleprinter. A [console]{link|url=https://en.wikipedia.org/wiki/System_console} was a special type of terminal that would typically be plugged into a special port of the computer. Now that everything is software, the distinction between terminal and console is blurred.`{note}\n\n|> Heading\n    Programs: What can I ask for?\n\nTo copy a file you tell the computer \"copy this file to there.\" To let it list you all files in a folder you tell it \"list everything with all info.\" To remove a folder, you tell it \"remove this folder and everything in it.\"\n\nOk, I lied a bit. Unfortunately, computers don't yet reliably understand the way we talk and write. But we can simply structure our questions in a certain manner---meet them halfway. To do the things mentioned before, you really write is `cp thisFile.txt there.txt`{bash}, `ls -l`{bash} and `rm -r thisFolder`{bash}.\n\nWhat's going on there? The idea is that you call a program and describe how it should do its job. So the copy program, `cp`{bash}, needs to know which file to copy where. `ls`{bash} wants to know whether it should present the files in a compact list or a table with all information. And `rm`{bash} needs to know that it is dealing with a folder and should really delete everything inside.\n\nYou tell a program how to do its job using arguments. You'll notice that there are two types of arguments. There were the file names and there was this thing with the dash in front, e.g. `-l`{bash}. Some programs expect their arguments in a specific order. For example, `cp`{bash} wants the file to copy first and then the destination to copy it to. Other times you have to specify what kind of argument you are giving. `ls`{bash} takes many different arguments, for example to also show hidden files, `-a`{bash}. So these arguments have names that typically start with a dash.\n\nWhat does the answer look like? If you're lucky, nothing. Seriously. For example, if `cp`{bash} does its job, it gives no output. Only if it could not copy a file, e.g., because the file you wanted to copy does not actually exist, will it print what the problem was. So don't panic if you don't see a confirmation. Of course, programs like `ls`{bash} are an exception to this. Their job is to print out information to you.\n\n|> Heading\n    Paths: Moving around files and moving files around\n\nImagine you sat in front of an old teleprinter. Literally a printer where you typed on a keyboard and it would print out the response line by line. So you couldn't just drag a file to the trash bin on a video screen to delete it, and you couldn't open a folder and see previews of the images inside.\n\nInstead, the terminal is always in a /working directory/. By default it opens your user folder. If the working directory contains a file `readme.txt`{bash}, then you could remove it simply by giving its name, `rm readme.txt`{bash}. This works, because the terminal looks up file names relative to its working directory.\n\nHow do you open the file `findme.txt`{bash} that's inside the folder `hiddenStuff`{bash}? You can tell the terminal how to get to the file using a /path/. In our example, the path would be `hiddenStuff/findme.txt`{bash}. So you tell the terminal which folders to go into, separated by slashes, `/`{bash}, and then you give it the file name. If you want to remove a file that is multiple folders away, the command could look like `rm firstFolder/secondFolder/thirdFolder/file.txt`{bash}.\n\nAll of these paths are relative to the working directory that the terminal is currently inside of. So all your images are available, but what if you need to access your USB drive? That is not inside your user folder. How do you access those?\n\nThe paths I showed you are relative. But of course every file has a unique path when you start at the first folder, the /root directory/. The `homework.txt`{bash} on your USB drive is available at `/dev/sda1/homework.txt`{bash}. So if you start at the root folder, your USB drive is available inside the `dev`{bash} folder and then inside the `sda1`{bash} folder. Every path that starts with a slash is an absolute path that start at the root directory! Paths that start with a folder or file name are relative paths that start at the working directory.\n\nRelative paths can also be written as `./hiddenStuff/findme.txt`{bash}, because `.`{bash} is a kind of name for the current directory which in the beginning is the working directory! You could do weird stuff like `hiddenStuff/./findme.txt`{bash} which says \"From the working directory, go into the `hiddenStuff`{bash} folder, then go into the current folder (you're already in the current folder, duh!) and then there is the file `findme.txt`{bash}.\"\n\nBut there is also a more useful name which is that of the parent directory, called `..`{bash}. So `hiddenStuff/../otherFile.txt`{bash} says \"From the working directory, go into `hiddenStuff`{bash}, then go back to its parent folder (which is the working directory where we came from) and then there is the file `otherFile.txt`{bash}.\" So that path is the same as `findme.txt`{bash} or `./findme.txt`{bash}.\n\nNow it gets interesting because we change the working directory. The program that \"changes directory\" is `cd`{bash}. So to remove a file in the `hiddenStuff`{bash} folder, you can call `rm hiddenStuff/findme.txt`{bash} or you can go into the folder with `cd hiddenStuff` and then remove the file with `rm findme.txt`. Note that these are now two commands. But if you use `ls` you'll see that it will list different files as before, because you are in a different folder! So if you need with a lot of files from `hiddenStuff`{bash}, then `cd`{bash} is useful because it makes the path shorter. How do you get back? Well, you go to the parent directory with `cd ..`{bash} which in our example takes you back to your user folder.\n\n|> Heading\n    Help: `man`{bash}, what can I do?\n\nSince people are lazy, they try to keep everything short. \"Copy\" becomes `cp`{bash}, \"list\" becomes `ls`{bash}, \"show all files, including hidden ones\" becomes `-a`{bash}. So it might be a bit difficult to guess or even remember how everything was called exactly.\n\nBut luckily, most programs have a \"manual\" on how to use their programs. And it's available as a terminal program, `man`{bash}! If you forget how to use `cp`{bash}, `man cp`{bash} will list you all options that are available. Many programs also offer a flag that displays some helpful information, typically called `--help`{bash}. So `cp --help`{bash} will show you what flags and options are available and how it's used. There is no better one, those are just two different ways that programs might give you help.\n\nYou also need to know how to read certain aspects of the help text. As an example, here is a snippet of what `ls --help`{bash} returns:\n\n|> Bash\n    Usage: ls [OPTION]... [FILE]...\n    List information about the FILEs (the current directory by default).\n    Sort entries alphabetically if none of -cftuvSUX nor --sort is specified.\n\n    Mandatory arguments to long options are mandatory for short options too.\n      -a, --all                  do not ignore entries starting with .\n      -A, --almost-all           do not list implied . and ..\n          --author               with -l, print the author of each file\n      -b, --escape               print C-style escapes for nongraphic characters\n    ... let's skip some ...\n      -l                         use a long listing format\n    ... let's skip the rest ...\n\nThe first thing it tells you is how you have to write it, its `usage`{bash}. First `ls`{bash}, then optionally multiple options, then optionally multiple files. The square brackets in `[OPTION]`{bash} indicate, that it's an optional argument; you can also leave it out. The ellipsis, `...`{bash}, tells you that you can put multiple options after each other.\n\nAfter the usage, it gives an overview. It also gives more information on the `FILE`{bash} that showed up in the `usage`{bash}. Sometimes there's different ways you can call a program, for example if it has subcommands. All possibilities will be listed and explained in the following text.\n\nThen comes a list of all possible options. Some options have short names (one dash, one letter, e.g. `-a`{bash}), some have long names (two dashes, more letters, e.g. `--all`{bash}), some have both and you can choose. So `ls -a`{bash} and `ls --all`{bash} do the same thing. There is no shorthand for `ls --author`{bash} and no long version of `ls -l`{bash}, though.\n\nIf the option needs more information, it takes a so-called \"argument\". Sometimes, options that take no arguments are called flags. They are usually used to turn on something. For example, `--all`{bash} is a flag that turns on listing of normally hidden files that start with a `.`{bash}.\n\nIf you specify multiple options or files, you need to separate them with spaces. `ls --all -l first-file second-file`{bash} is good, but just like you the computer can't read `ls --all-lfirst-filesecond-file`{bash}, it all looks like one big argument!\n\nOf course there is an exception: You can mash short options together, e.g. `ls -al`{bash}. Not to be confused with `ls --all`{bash}, notice the dashes! So everything following a single dash are shorthand options. Their order does not matter, so `ls -al`{bash} and `ls -la`{bash} do the same thing.\n\n|> Heading\n    Rights: `sudo`{bash}, I'm begging you\n\nObviously, not everyone should be allowed to read and copy your homework. Only you have the copyright! Similarly, access to files on a computer is typically restricted by rights. Some files are specially protected to prevent the wrong people from using them.\n\nThe downside is that the computer does not know if it's really you bashing the keyboard. So you use a password that (presumably) only you know to log into your account.\n\nCertain files shouldn't be modified by accident, because they are used by the system. If something wrong happens to them, your computer might crash! But if you know what you do, you might need to use those files anyway; or you ask a program to do it.\n\nInstalling new software on your Ubuntu (that's a Linux operating system flavor) happens with the `apt`{bash} program. But not everyone should be allowed to install software, only the owner of the computer, known as the \"administrator\". To prove that you are the admin, you have to enter the password.\n\nBut logging out from your typical account, loggin in with the admin account, installing the software, and then switching accounts back again is really tedious. So Ubuntu has the `sudo` mechanism. It let's you switch the accounts very quickly and just one command as the admin.\n\nThe first time you use `sudo apt install awesome-software`{bash}, it will ask for your password. If you entered it correctly, it will run `apt install awesome-software`{bash} with admin rights. Then the terminal is back under your account. It will even remember the password for a while, so running `sudo apt install other-thing`{bash} won't bother you with the password again. But when you close the terminal and reopen it, you'll need to enter the password again.\n\n|> Heading\n    Pipes: All for one, one for all\n\nYou can make programs work together! What one programs prints out, you can feed into the text. Sounds like a bad idea? Actually it works pretty nicely in many cases.\n\nAs an example, we can print the contents of a file and then check whether a certain word is contained in the text. To print a file, use `cat`{bash}. That stands for con/cat/enate which means to add to the back of something, in this case concatenating the file content to the bottom of the terminal. `cat file`{bash} will print out the contents of `file`{bash}.\n\n`grep`{bash} (meaning \"/g/lobal///r/egular /e/xpression///p/rint\") will go through some text line by line and print out only the lines containing a pattern. If given the text\n\n|> Bash\n    find me\n    leave me alone\n    please, find me, too\n\n`grep find`{bash} will output\n\n|> Bash\n    find me\n    please, find me, too\n\nYou can plumb these two programs together. To take what `cat`{bash} outputs and input it into `grep`{bash}, use a pipe which is written as a vertical bar: `cat file | grep find`{bash}.\n\n|> Heading\n    Variations: Not all consoles are created equal\n\nThere are a lot of different consoles out there. There's bash, fish, zsh, cmd, PowerShell and more that I don't even know of. And they all work slightly differently.\n\nThe biggest difference is between Unix shells (used in Linux and Mac OS) and Window's variants. The programs and paths above are inspired by the bash, the Bourne Again Shell. On Windows, there is no `cp`{bash} program. But there are alternatives for copying files: in cmd it's called `copy`{bash}, in PowerShell `Copy-Item`{bash}. Even paths are written differently. On Unix each folder ends with a forward slash, `/path/to/a/file`{bash}, while on Windows it's a backward slash, `\\path\\to\\a\\file`{bash}.\n\nBut it's not too bad. All consoles still provide you programs that you can call with options and flags.\n\n|> Heading\n    Tricks: Complete historic kill\n\nWhen you have to work with the terminal more often, you might benefit from some tricks that many consoles offer. Try them out to see whether they are supported in the terminal you use.\n\nMost consoles will allow you to enter part of a file name and hit ``{key|c=TAB} which triggers them to fill out the rest of the file name for you. If there are multiple options that start with what you have typed so far, it won't pick one at random. Hit ``{key|c=TAB} twice to show a list of available files. Continue to type out the file name you want until you can ``{key|c=TAB} it to completion. Completion usually also works for programs and arguments.\n\nYou can also quickly re-enter a command you have already executed, because most consoles keep a history. To go back in time, simply move ``{key|c=UP}. You can also go ``{key|c=DOWN} if you went past the command you wanted. If what you are looking for is a while back, you can, in some shells, press ``{key|c=CTRL+R} and enter some part of the command. The history will be searched in reverse and the latest matching result will be shown. To select it, press ``{key|c=ENTER}, to cancel ``{key|c=CTRL+C}.\n\nThat last command, ``{key|c=CTRL+C}, kills the program. For any program, if it won't stop, you can go back to normal by sending that command. Note that the first time you send ``{key|c=CTRL+C}, it will ask the program nicely to terminate. Most programs react immediately to this! If one misbehaves, sending ``{key|c=CTRL+C} again will make the system stop the program, which can corrupt whatever the program was busy doing, though most of the time it is better to stop such a program anyway. Unfortunately, my muscle memory kills programs when I actually want to copy some text. Copying happens in some shells with ``{key|c=CTRL+SHIFT+C}, pasting correspondingly with ``{key|c=CTRL+SHIFT+V}.","staticData":{}}